package base64MyCaptchaDigit

import (
	"encoding/base64"
	"fmt"
	"io"
	"strings"
	"time"

	"github.com/burhon94/goCaptchaMojo/modeles"
	"github.com/mojocn/base64Captcha/store"
)

var (
	// GCLimitNumber The number of captchas created that triggers garbage collection used by default store.
	GCLimitNumber = 10240
	// Expiration time of captchas used by default store.
	Expiration = 10 * time.Minute
	// globalStore is a shared storage for captchas, generated by New function.
	globalStore = store.NewMemoryStore(GCLimitNumber, Expiration)
)

// CaptchaInterface captcha interface for captcha engine to to write staff
type CaptchaInterface interface {
	// BinaryEncoding covert to bytes
	BinaryEncoding() []byte
	// WriteTo output captcha entity
	WriteTo(w io.Writer) (n int64, err error)
}

// CaptchaWriteToBase64Encoding converts captcha to base64 encoding string.
// mimeType is one of "image/png".
func CaptchaWriteToBase64Encoding(cap CaptchaInterface) string {
	binaryData := cap.BinaryEncoding()
	var mimeType = MimeTypeCaptchaImage
	return fmt.Sprintf("data:%s;base64,%s", mimeType, base64.StdEncoding.EncodeToString(binaryData))
}

// CaptchaItem captcha basic information.
type CaptchaItem struct {
	// Content captcha entity content.
	Content string
	// VerifyValue captcha verify value.
	VerifyValue string
	// ImageWidth image width pixel.
	ImageWidth int
	// ImageHeight image height pixel.
	ImageHeight int
}

// VerifyCaptcha by given id key and remove the captcha value in store, return boolean value.
func VerifyCaptcha(identifier, verifyValue string) bool {
	return VerifyCaptchaAndIsClear(identifier, verifyValue, true)
}

// VerifyCaptchaAndIsClear verify captcha, return boolean value.
// identifier is the captcha id,
// verifyValue is the captcha image value,
// isClear is whether to clear the value in store.
func VerifyCaptchaAndIsClear(identifier, verifyValue string, isClear bool) bool {
	if verifyValue == "" {
		return false
	}
	storeValue := globalStore.Get(identifier, isClear)
	return strings.ToLower(storeValue) == strings.ToLower(verifyValue)
}

func GenerateCaptcha(idKey string, configuration modeles.ConfigDigit) (id string, captchaInstance CaptchaInterface, verifyValue string) {
	if idKey == "" {
		idKey = randomId()
	}
	id = idKey

	dig := EngineDigitsCreate(idKey, configuration)
	verifyValue = dig.VerifyValue
	captchaInstance = dig

	globalStore.Set(idKey, verifyValue)

	return idKey, captchaInstance, verifyValue
}
